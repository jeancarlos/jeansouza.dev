{"version":3,"sources":["constants/appleEmoji.js","components/Emoji.jsx","routes/home.js","routes/social.js","routes/index.js","App.js","serviceWorker.js","index.js"],"names":["appleEmoji","Emoji","label","symbol","className","parseSymbol","spanEl","useRef","useState","fontSize","setFontSize","useEffect","emoji","current","window","getComputedStyle","style","width","alt","src","ref","role","aria-label","aria-hidden","toString","home","title","description","path","component","lazy","exact","social","routes","App","history","useHistory","placeHolder","map","Component","key","fallback","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6HAKeA,EALI,CACjB,eAAM,wGACN,SAAK,sGC6BQC,IA5Bf,YAAmD,IAAlCC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,OAA0B,IAAlBC,iBAAkB,MAAN,GAAM,EAC5CC,EAAcF,EACZG,EAASC,iBAAO,MAF0B,EAGhBC,mBAAS,QAHO,mBAGzCC,EAHyC,KAG/BC,EAH+B,KAehD,OAVAC,qBAAU,WACJC,EAAMT,IAAWG,EAAOO,SAC1BH,EAAYI,OAAOC,iBAAiBT,EAAOO,SAAS,gBAErD,CAACV,IAEAS,EAAMT,KACRE,EAAe,yBAAKW,MAAO,CAAEC,MAAOR,GAAYS,IAAI,GAAGC,IAAKP,EAAMT,MAIlE,0BACEiB,IAAKd,EACLF,UAAS,UAAKA,EAAL,UACTiB,KAAK,MACLC,aAAYpB,GAAS,GACrBqB,iBAAgBrB,GAAOsB,YAEtBnB,K,4KCZQoB,EAVF,CACX,CACEC,MAAO,kCACPC,YAAa,mEACbC,KAAM,IACNC,UAPSC,gBAAK,kBAAM,gCAQpBC,OAAO,ICEIC,EARA,CACb,CACEN,MAAO,2CACPE,KAAM,UACNC,UANWC,gBAAK,kBAAM,kCCMXG,EALH,sBACLR,GADK,YAELO,ICyBQE,MApBf,WACE,IAAIC,EAAUC,cACRC,EACJ,4BAAQjC,UAAU,eAChB,kBAACH,EAAA,EAAD,CAAOG,UAAU,2BAA2BD,OAAO,YAGvD,OAAQ,yBAAKC,UAAU,OACrB,kBAAC,IAAD,KAAQ,kBAAC,IAAD,KACL6B,EAAOK,KAAI,gBAAGV,EAAH,EAAGA,KAAMG,EAAT,EAASA,MAAkBQ,EAA3B,EAAgBV,UAAhB,OACV,kBAAC,IAAD,CAAOW,IAAKZ,EAAMG,MAAOA,EAAOH,KAAMA,GACpC,kBAAC,WAAD,CAAUa,SAAUJ,GAClB,kBAACE,EAAD,CAAWJ,QAASA,aCVZO,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.59cbdcb9.chunk.js","sourcesContent":["const appleEmoji = {\n  'ðŸ”—': 'https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/320/apple/237/link-symbol_1f517.png',\n  'âŒ›': 'https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/apple/237/hourglass_231b.png'\n}\n\nexport default appleEmoji\n","import React, { useRef, useEffect, useState } from 'react';\nimport emoji from 'constants/appleEmoji'\n\nfunction Emoji({ label, symbol, className = '' }) {\n  let parseSymbol = symbol\n  const spanEl = useRef(null)\n  const [fontSize, setFontSize] = useState('1rem')\n\n  useEffect(() => {\n    if (emoji[symbol] && spanEl.current) {\n      setFontSize(window.getComputedStyle(spanEl.current)['font-size'])\n    }\n  }, [symbol]);\n\n  if (emoji[symbol]) {\n    parseSymbol = (<img style={{ width: fontSize }} alt=\"\" src={emoji[symbol]} />)\n  }\n\n  return (\n    <span\n      ref={spanEl}\n      className={`${className} emoji`}\n      role=\"img\"\n      aria-label={label || ''}\n      aria-hidden={(!!label).toString()}\n    >\n      {parseSymbol}\n    </span>\n  )\n}\n\nexport default Emoji\n","import { lazy } from 'react'\n\nconst Home = lazy(() => import('containers/Home'))\n\nconst home = [\n  {\n    title: 'Jean Souza - Front-End Engineer',\n    description: 'Specialist in technologies for the creation of web applications.',\n    path: '/',\n    component: Home,\n    exact: true\n  }\n]\n\nexport default home\n","import { lazy } from 'react'\n\nconst Social = lazy(() => import('containers/Social'))\n\nconst social = [\n  {\n    title: 'Social | Jean Souza - Front-End Engineer',\n    path: '/social',\n    component: Social\n  }\n]\n\nexport default social\n","import home from './home'\nimport social from './social'\n\nconst routes = [\n    ...home,\n    ...social\n]\n\nexport default routes ","import React, { Suspense } from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  useHistory\n} from \"react-router-dom\";\nimport Emoji from 'components/Emoji'\nimport routes from './routes'\n\nfunction App() {\n  let history = useHistory();\n  const placeHolder = (\n    <header className=\"App--Header\">\n      <Emoji className=\"App--Header App--Loading\" symbol=\"âŒ›\" />\n    </header>\n  )\n  return (<div className=\"App\">\n    <Router><Switch>\n      {routes.map(({ path, exact, component: Component }) => (\n        <Route key={path} exact={exact} path={path}>\n          <Suspense fallback={placeHolder}>\n            <Component history={history} />\n          </Suspense>\n        </Route>\n      ))}\n    </Switch></Router>\n  </div>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}